# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-08 17:49
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(default=0)),
                ('precision', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=250)),
                ('aspect', models.CharField(choices=[('main', 'Main'), ('recto', 'Recto'), ('verso', 'Verso'), ('detail', 'detail'), ('signature', 'signature')], default='main', max_length=25)),
                ('checksum', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('altitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('street', models.TextField(blank=True, null=True)),
                ('locality', models.CharField(blank=True, default='Chicago', max_length=250, null=True)),
                ('region', models.CharField(blank=True, choices=[('IL', 'Illinois'), ('IN', 'Indiana'), ('MI', 'Michigan'), ('WI', 'Wisconsin')], default='IL', max_length=250, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=250, null=True)),
                ('countries', models.CharField(blank=True, choices=[('CA', 'Canada'), ('FR', 'France'), ('MX', 'Mexico'), ('US', 'United States')], default='US', max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=250)),
                ('slug', models.SlugField(unique=True)),
                ('label', models.CharField(choices=[('event', 'event'), ('work', 'work'), ('person', 'person'), ('organization', 'organization')], max_length=25)),
                ('sublabels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), size=None)),
                ('is_active', models.NullBooleanField(default=True)),
                ('is_primary', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_web_public', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('predicate', models.CharField(choices=[('has_affiliation', 'affiliated with'), ('has_contributor', 'has contributor'), ('has_creator', 'has creator'), ('has_curator', 'has curator'), ('has_date', 'has date'), ('has_editor', 'has editor'), ('has_employee', 'has employee'), ('has_exhibitor', 'has exhibitor'), ('has_existence', 'exists'), ('has_friend', 'has friend'), ('has_life', 'is alive'), ('has_location', 'has location (NOT venue)'), ('has_member', 'has member'), ('has_organizer', 'has organizer'), ('has_owner', 'has owner'), ('has_parent', 'has parent'), ('has_performer', 'has performer'), ('has_primary', 'is a subsidiary of'), ('has_producer', 'has producer'), ('has_publisher', 'has publisher'), ('has_spouse', 'is married to'), ('has_translator', 'has translator'), ('has_venue', 'has venue'), ('part_of', 'part of'), ('same_as', 'same as')], max_length=25)),
                ('dates', models.ManyToManyField(blank=True, to='api.Date')),
                ('dobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reverse_relations', to='api.Record')),
                ('locations', models.ManyToManyField(blank=True, to='api.Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('value', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(choices=[('book', 'book'), ('website', 'website'), ('journal_article', 'journal article'), ('newspaper_article', 'newspaper article')], max_length=25)),
                ('title', models.CharField(max_length=250)),
                ('publisher', models.CharField(blank=True, max_length=250)),
                ('place', models.CharField(blank=True, max_length=250)),
                ('date', models.CharField(blank=True, max_length=250)),
                ('source_url', models.URLField(blank=True, max_length=250)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(max_length=250)),
                ('slug', models.SlugField(unique=True)),
                ('vocabulary', models.CharField(blank=True, choices=[('visualist', 'The Visualist'), ('aat', 'Getty Art and Architecture Thesaurus'), ('ulan', 'Getty Union List of Artist Names'), ('lccn', 'Library of Congress Control Number'), ('viaf', 'Virtual International Authority File')], max_length=25, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('canonical_url', models.URLField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.Term')),
                ('same_as', models.ManyToManyField(blank=True, related_name='_term_same_as_+', to='api.Term')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='snippet',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Source'),
        ),
        migrations.AddField(
            model_name='relation',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Source'),
        ),
        migrations.AddField(
            model_name='relation',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Record'),
        ),
        migrations.AddField(
            model_name='record',
            name='descriptions',
            field=models.ManyToManyField(blank=True, to='api.Snippet'),
        ),
        migrations.AddField(
            model_name='record',
            name='images',
            field=models.ManyToManyField(blank=True, to='api.Image'),
        ),
        migrations.AddField(
            model_name='record',
            name='related',
            field=models.ManyToManyField(blank=True, through='api.Relation', to='api.Record'),
        ),
        migrations.AddField(
            model_name='record',
            name='terms',
            field=models.ManyToManyField(blank=True, to='api.Term'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together=set([('latitude', 'longitude', 'altitude')]),
        ),
        migrations.AddField(
            model_name='image',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Record'),
        ),
        migrations.AlterUniqueTogether(
            name='date',
            unique_together=set([('date', 'duration', 'precision')]),
        ),
    ]
