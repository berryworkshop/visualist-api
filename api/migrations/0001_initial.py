# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-13 02:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('address_street', models.TextField()),
                ('address_locality', models.CharField(max_length=250)),
                ('address_region', models.CharField(choices=[('IL', 'Illinois'), ('IN', 'Indiana'), ('MI', 'Michigan'), ('WI', 'Wisconsin')], max_length=2)),
                ('address_postal_code', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(max_length=250)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.Category')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['value'],
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(max_length=250)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=250)),
                ('aspect', models.CharField(choices=[('main', 'Main'), ('recto', 'Recto'), ('verso', 'Verso'), ('detail', 'detail'), ('signature', 'signature')], default='main', max_length=25)),
                ('checksum', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('url', models.URLField(blank=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Nationality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(choices=[('US', 'United States of America'), ('CA', 'Canada'), ('MX', 'Mexico')], max_length=2, unique=True)),
            ],
            options={
                'verbose_name_plural': 'nationalities',
                'ordering': ['value'],
            },
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('country', models.PositiveIntegerField(default=1)),
                ('area', models.PositiveIntegerField()),
                ('exchange', models.PositiveIntegerField()),
                ('number', models.PositiveIntegerField()),
                ('extension', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('featured', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('web_public', models.BooleanField(default=True)),
                ('same_as', models.URLField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('url', models.URLField(blank=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.TextField()),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.License')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('service', models.CharField(choices=[('ask', 'Ask.fm'), ('facebook', 'Facebook'), ('flickr', 'Flickr'), ('foursquare', 'Foursquare'), ('github', 'GitHub'), ('googleplus', 'Google+'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('meetup', 'Meetup'), ('pinterest', 'Pinterest'), ('reddit', 'Reddit'), ('snapchat', 'SnapChat'), ('tumblr', 'Tumblr'), ('twitter', 'Twitter'), ('vine', 'Vine'), ('whatsapp', 'WhatsApp'), ('yelp', 'Yelp'), ('youtube', 'YouTube')], max_length=25)),
                ('value', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.SlugField(unique=True)),
            ],
            options={
                'ordering': ['value'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Record')),
            ],
            options={
                'abstract': False,
            },
            bases=('api.record',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Record')),
                ('name', models.CharField(max_length=250)),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField(blank=True)),
                ('status', models.CharField(choices=[('active', 'active'), ('cancelled', 'cancelled')], default='active', max_length=25)),
                ('group_friendly', models.NullBooleanField()),
            ],
            options={
                'ordering': ['-date_start', '-date_end', 'name'],
            },
            bases=('api.record',),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Record')),
                ('name', models.CharField(max_length=250)),
                ('body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Snippet')),
                ('events', models.ManyToManyField(blank=True, related_name='has_venue', to='api.Event')),
            ],
            options={
                'ordering': ['name', '-created'],
            },
            bases=('api.record',),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Record')),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'ordering': ['name', '-created'],
            },
            bases=('api.record',),
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Record')),
                ('name', models.CharField(max_length=250)),
                ('completed', models.DateTimeField(blank=True)),
                ('published', models.DateTimeField(blank=True)),
                ('version', models.CharField(blank=True, max_length=250)),
                ('url', models.URLField(blank=True)),
                ('created_at', models.ManyToManyField(blank=True, related_name='works_created_here', to='api.Place')),
                ('location', models.ManyToManyField(blank=True, related_name='works_here', to='api.Place')),
            ],
            options={
                'ordering': ['name', '-created'],
            },
            bases=('api.record',),
        ),
        migrations.AlterUniqueTogether(
            name='socialaccount',
            unique_together=set([('service', 'value')]),
        ),
        migrations.AddField(
            model_name='record',
            name='addresses',
            field=models.ManyToManyField(blank=True, to='api.Address'),
        ),
        migrations.AddField(
            model_name='record',
            name='categories',
            field=models.ManyToManyField(to='api.Category'),
        ),
        migrations.AddField(
            model_name='record',
            name='description',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Snippet'),
        ),
        migrations.AddField(
            model_name='record',
            name='emails',
            field=models.ManyToManyField(blank=True, to='api.Email'),
        ),
        migrations.AddField(
            model_name='record',
            name='images',
            field=models.ManyToManyField(blank=True, to='api.Image'),
        ),
        migrations.AddField(
            model_name='record',
            name='license',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.License'),
        ),
        migrations.AddField(
            model_name='record',
            name='phones',
            field=models.ManyToManyField(blank=True, to='api.Phone'),
        ),
        migrations.AddField(
            model_name='record',
            name='social_accounts',
            field=models.ManyToManyField(blank=True, to='api.SocialAccount'),
        ),
        migrations.AddField(
            model_name='record',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource'),
        ),
        migrations.AddField(
            model_name='record',
            name='tags',
            field=models.ManyToManyField(blank=True, to='api.Tag'),
        ),
        migrations.AddField(
            model_name='phone',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource'),
        ),
        migrations.AddField(
            model_name='image',
            name='license',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.License'),
        ),
        migrations.AddField(
            model_name='image',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource'),
        ),
        migrations.AddField(
            model_name='identifier',
            name='record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Record'),
        ),
        migrations.AddField(
            model_name='email',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource'),
        ),
        migrations.AddField(
            model_name='address',
            name='address_country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Nationality'),
        ),
        migrations.AddField(
            model_name='address',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Resource'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Post')),
                ('records', models.ManyToManyField(to='api.Record')),
            ],
            options={
                'ordering': ['-created'],
            },
            bases=('api.post',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Entity')),
                ('name', models.CharField(max_length=250)),
                ('founded', models.DateTimeField(blank=True)),
                ('dissolved', models.DateTimeField(blank=True)),
                ('nonprofit', models.NullBooleanField()),
                ('appointment_only', models.BooleanField(default=False)),
                ('hours', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name', '-created'],
            },
            bases=('api.entity',),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Post')),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Snippet')),
            ],
            options={
                'ordering': ['-created'],
            },
            bases=('api.post',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Entity')),
                ('name_first', models.CharField(blank=True, max_length=250)),
                ('name_last', models.CharField(max_length=250)),
                ('born', models.DateTimeField(blank=True, null=True)),
                ('died', models.DateTimeField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('m', 'male'), ('f', 'female'), ('x', 'x')], max_length=1)),
                ('born_at', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='birthplace_of', to='api.Place')),
                ('died_at', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deathplace_of', to='api.Place')),
                ('friends', models.ManyToManyField(blank=True, related_name='_person_friends_+', to='api.Person')),
                ('nationalities', models.ManyToManyField(blank=True, to='api.Nationality')),
                ('parents', models.ManyToManyField(blank=True, related_name='_person_parents_+', to='api.Person')),
            ],
            options={
                'verbose_name_plural': 'people',
                'ordering': ['name_last', 'name_first', '-created'],
            },
            bases=('api.entity',),
        ),
        migrations.AddField(
            model_name='post',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.Post'),
        ),
        migrations.AlterUniqueTogether(
            name='phone',
            unique_together=set([('area', 'exchange', 'number')]),
        ),
        migrations.AddField(
            model_name='event',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='contributor_to', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='event',
            name='curators',
            field=models.ManyToManyField(blank=True, related_name='curator_of', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='event',
            name='exhibitors',
            field=models.ManyToManyField(blank=True, related_name='exhibitor_at', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='event',
            name='organizers',
            field=models.ManyToManyField(blank=True, related_name='organizer_of', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='event',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.Event'),
        ),
        migrations.AddField(
            model_name='event',
            name='producers',
            field=models.ManyToManyField(blank=True, related_name='producer_of', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='works',
            field=models.ManyToManyField(blank=True, related_name='creator', to='api.Work'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set([('value', 'parent')]),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together=set([('address_street', 'address_locality', 'address_region')]),
        ),
        migrations.AddField(
            model_name='organization',
            name='artists',
            field=models.ManyToManyField(blank=True, related_name='represented_by', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='organization',
            name='employees',
            field=models.ManyToManyField(blank=True, related_name='employed_by', to='api.Person'),
        ),
        migrations.AddField(
            model_name='organization',
            name='founded_at',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Place'),
        ),
        migrations.AddField(
            model_name='organization',
            name='logo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Image'),
        ),
        migrations.AddField(
            model_name='organization',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='member_of', to='api.Entity'),
        ),
        migrations.AddField(
            model_name='organization',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.Organization'),
        ),
    ]
